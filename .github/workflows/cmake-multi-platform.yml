name: CMake Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, macos-13 ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang ]
        include:
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++

          - os: macos-13
            c_compiler: gcc
            cpp_compiler: g++

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      # Install dependencies: cmake, ninja, gcc, clang (llvm), libgcrypt, openssl, readline, and libsodium
      - name: Install Dependencies
        if: matrix.os == 'macos-13'
        run: |
          brew update
          brew install cmake ninja gcc llvm libgcrypt openssl@3 readline libsodium

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa -y
          sudo apt update
          sudo apt install cmake ninja-build gcc-13 clang-17 lldb-17 lld-17 libc++-17-dev libc++abi-17-dev libomp-17-dev libgcrypt20 openssl libreadline8 libsodium23 libsodium-dev

      - name: Build BLAKE3
        run: |
          git clone https://github.com/BLAKE3-team/BLAKE3.git
          cd BLAKE3/c
          cmake -B build -G Ninja
          sudo cmake --build build --config Release --target install



      - uses: actions/checkout@v3

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Set compiler environment variables
      - name: Set compiler environment variables
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
        run: |
          export CC=gcc-13
          export CXX=g++-13

      - name: Set compiler environment variables
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
        run: |
          export CC=clang-17
          export CXX=clang++-17

      - name: Set compiler environment variables
        if: matrix.os == 'macos-13' && matrix.c_compiler == 'gcc'
        run: |
          export CC=gcc-13
          export CXX=g++-13

      - name: Set compiler environment variables
        if: matrix.os == 'macos-13' && matrix.c_compiler == 'clang'
        run: |
          export CC=clang
          export CXX=clang++


      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: ctest --build-config ${{ matrix.build_type }}
