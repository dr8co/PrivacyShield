name: CMake Build

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, macos-13 ]
        build_type: [ Debug, Release ]
        c_compiler: [ gcc, clang ]
        include:
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
            env:
              LDFLAGS=: "-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
              CPPFLAGS: "-I/usr/local/opt/llvm/include I/usr/local/opt/llvm/include/c++/v1"
              LD_LIBRARY_PATH: "/usr/local/opt/llvm/lib"
              DYLD_LIBRARY_PATH: "/usr/local/opt/llvm/lib"

          - os: macos-13
            c_compiler: gcc
            cpp_compiler: g++-13

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++-13

          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++-17

        # Don't include the following configurations in the matrix
#        exclude:
#          - os: macos-13
#            c_compiler: clang # LLVM Clang17+ required, and building it from the source will take longer

    steps:
      # Install dependencies: cmake, ninja, gcc, libgcrypt, openssl, readline, and libsodium
      - name: Install Dependencies
        if: matrix.os == 'macos-13'
        run: |
          brew update
          brew install llvm cmake ninja gcc libgcrypt openssl@3 readline libsodium
          echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/gcc/bin:$PATH"' >> ~/.bash_profile

#      - name: Install Dependencies
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
#          sudo add-apt-repository -y "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
#          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/ppa
#          sudo apt update
#          sudo apt install -y cmake ninja-build gcc-13 g++-13 clang-17 lldb-17 lld-17 libc++-17-dev libc++abi-17-dev \
#          libomp-17-dev libgcrypt20 openssl libreadline8 libsodium23 libsodium-dev


      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Build project
      - name: Build PrivacyShield
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo ./scripts/buildscript.sh
      #          OS=${{ matrix.os }}
      #          COMMAND="./scripts/install-blake3.sh ${{ matrix.c_compiler }}"
      #          if [ "$OS" == "macos-13" ]; then
      #            $COMMAND
      #          elif [ "$OS" == "ubuntu-latest" ]; then
      #            sudo $COMMAND
      #          fi
      #

      - name: Install Blake3
        if: matrix.os == 'macos-13'
        run: |
          ./scripts/install-blake3.sh ${{ matrix.c_compiler }};
          env | sort;
          echo "\nOPT:";
          ls /usr/local/opt;

      - name: Configure CMake
        if: matrix.os == 'macos-13'
        run: >
          export LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib";
          export CPPFLAGS="-I/usr/local/opt/llvm/include -I/usr/local/opt/llvm/include/c++/v1/";
          export LD_LIBRARY_PATH="/usr/local/opt/llvm/lib";
          export DYLD_LIBRARY_PATH="/usr/local/opt/llvm/lib";
          
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++
          -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang
          -DCMAKE_CXX_FLAGS="-stdlib=libstdc++"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }} -G Ninja

      - name: Build
        if: matrix.os == 'macos-13'
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 4
#
#      - name: Test
#        working-directory: ${{ steps.strings.outputs.build-output-dir }}
#        # Execute tests defined by the CMake configuration
#        run: ctest --build-config ${{ matrix.build_type }}
#
      - name: Package
        if: matrix.os == 'macos-13'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          cpack -G DragNDrop

      - name: Package
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          sudo cpack
#
#      # Upload the built artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-${{ matrix.build_type }}"
          path: "${{ github.workspace }}/Packages"
          overwrite: true
          if-no-files-found: 'warn'

