name: CPack Multi-Platform

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build_then_package:
    runs-on: ${{ matrix.os }}
    env:
      GCC_MAJOR: 14

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-24.04, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ clang ]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++-18

          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++-18

    steps:
      - name: Install Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=TRUE
          brew update
          brew install ninja cmake git "gcc@${{ env.GCC_MAJOR }}"
          brew reinstall llvm
          echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/opt/homebrew/opt/gcc/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/opt/homebrew/opt/gcc/lib/gcc/${{ env.GCC_MAJOR }}:$PATH"' >> ~/.bash_profile   
          . ~/.bash_profile

      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          # Set the paths to the GCC include and lib directories on macOS
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "gcc-include-dir=$(./scripts/search.sh "/opt/homebrew/Cellar/gcc/*/include/c++/${{ env.GCC_MAJOR }}")" >> "$GITHUB_OUTPUT"
            echo "gcc-sys-include-dir=$(./scripts/search.sh "/opt/homebrew/Cellar/gcc/*/include/c++/${{ env.GCC_MAJOR }}/*-apple-darwin*")" >> "$GITHUB_OUTPUT"
            echo "gcc-lib-dir=$(./scripts/search.sh "/opt/homebrew/Cellar/gcc/*/lib/gcc/${{ env.GCC_MAJOR }}")" >> "$GITHUB_OUTPUT"
          fi

      # Build the project
      - name: Build PrivacyShield
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo ./scripts/build.sh

      - name: Install Blake3
        if: matrix.os == 'macos-latest'
        run: |
          sudo ./scripts/install-blake3.sh ${{ matrix.c_compiler }}

      - name: Configure CMake
        if: matrix.os == 'macos-latest'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm/bin/clang++
          -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm/bin/clang
          -DCMAKE_CXX_FLAGS="-stdlib++-isystem ${{ steps.strings.outputs.gcc-include-dir }} -cxx-isystem ${{ steps.strings.outputs.gcc-sys-include-dir }}"
          -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libstdc++ -L ${{ steps.strings.outputs.gcc-lib-dir }} -Wl,-rpath,/opt/homebrew/opt/gcc/lib/gcc/current"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }} -G Ninja

      - name: Build
        if: matrix.os == 'macos-latest'
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 4

      - name: Package
        if: matrix.os == 'macos-latest' && matrix.build_type == 'Release'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          cpack

      - name: Package
        if: matrix.os == 'ubuntu-24.04' && matrix.build_type == 'Release'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          sudo cpack
          sudo chown -R $USER:$USER "${{ github.workspace }}/Packages"

      - name: Import GPG Key
        if: matrix.build_type == 'Release'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_PASS }}
          trust_level: 5

      - name: Sign Package
        if: matrix.build_type == 'Release'
        working-directory: ${{ github.workspace }}
        run: |
          for file in Packages/*; do
            gpg --batch --status-file ~/gpg_log.txt --passphrase ${{ secrets.GPG_PASS }} --default-key dr8co@duck.com \
              --pinentry-mode=loopback --detach-sign "$file" || (cat ~/gpg_log.txt && exit 1)
          done

      # Upload the built artifacts
      - name: Upload Artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-${{ matrix.build_type }}"
          path: "${{ github.workspace }}/Packages"
          overwrite: true
          if-no-files-found: 'warn'
